shiny::runApp()
install.packages("palmerpenguins")
library(palmerpenguins)
head(penguins)
peng <- palmerpenguins
peng <- (palmerpenguins)
peng <- (penguins)
peng <- (penguins)
peng
view(peng)
library(tidyverse)
view(peng)
runApp()
runApp()
output$bill_length_vb <- renderUI({
value_box(title = "Bill depth",
value = bill_length(),
showcase = bs_icon("bank2"),
class = "bg-danger")
})
peng <- penguins
logo <- "https://eadania.com/media/3920/dania-academy-denmark-official-logo2.png"
theme_set(theme_minimal())
# Define UI for application that draws a histogram
ui <- fluidPage(
title = "EA Dania 2024",
# Application title
titlePanel("Datavisualisering"),
theme = shinythemes::shinytheme("cosmo"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
div(img(height = 65, width = 80, src = logo),
style = "text-align: center;"),
br(),
hr(),
br(),
radioButtons("sel_peng",
"Select penguins",
choices = c(unique(peng$species)))
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Min tab",
br(),
fluidRow(column(width = 3,
uiOutput("bill_length_vb")),
column(width = 3,
uiOutput("bill_depth_vb",
value = "50",
showcase = bs_icon("bank2"),
class = "bg-danger")),
column(width = 3,
value_box(title = "Bill depth",
value = "50",
showcase = bs_icon("bank2"),
class = "bg-danger")),
column(width = 3,
value_box(title = "Bill depth",
value = "50",
showcase = bs_icon("bank2"),
class = "bg-danger"))),
plotOutput("peng_plot")),
tabPanel("Min anden tab"))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
# Calculation -------------------------------------------------------------
bill_length <- reactive({
bl <- peng %>%
filter(species == input$sel_peng) %>%
summarise(mean = round(mean(bill_length_mm, na.rm = TRUE), digits = 1))
return(bl$mean)
})
# Value boxes -------------------------------------------------------------
output$bill_length_vb <- renderUI({
value_box(title = "Bill depth",
value = bill_length(),
showcase = bs_icon("bank2"),
class = "bg-danger")
})
# Plots -------------------------------------------------------------------
output$peng_plot <- renderPlot({
peng1 <- peng %>%
filter(species == input$sel_peng)
ggplot(peng1, aes(x = bill_length_mm,
y = bill_depth_mm)) +
geom_point() +
labs(title = input$sel_peng)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
(mean = round(mean(bill_depth_mm, na.rm = TRUE)
print(bd$mean)
bd <- peng %>%
filter(species == input$sel_peng) %>%
summarise(mean = round(mean(bill_depth_mm, na.rm = TRUE), digits = 1))
# Define UI for application that draws a histogram
ui <- fluidPage(
title = "EA Dania 2024",
# Application title
titlePanel("Datavisualisering"),
theme = shinythemes::shinytheme("cosmo"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
div(img(height = 65, width = 80, src = logo),
style = "text-align: center;"),
br(),
hr(),
br(),
radioButtons("sel_peng",
"Select penguins",
choices = c(unique(peng$species)))
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Min tab",
br(),
fluidRow(column(width = 3,
uiOutput("bill_length_vb")),
column(width = 3,
uiOutput("bill_depth_vb")),
column(width = 3,
value_box(title = "Bill depth",
value = "50",
showcase = bs_icon("bank2"),
class = "bg-danger")),
column(width = 3,
value_box(title = "Bill depth",
value = "50",
showcase = bs_icon("bank2"),
class = "bg-danger"))),
plotOutput("peng_plot")),
tabPanel("Min anden tab"))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
# Calculation -------------------------------------------------------------
bill_length <- reactive({
bl <- peng %>%
filter(species == input$sel_peng) %>%
summarise(mean = round(mean(bill_length_mm, na.rm = TRUE), digits = 1))
return(bl$mean)
})
bill_depth <- reactive({
bd <- peng %>%
filter(species == input$sel_peng) %>%
summarise(mean = round(mean(bill_depth_mm, na.rm = TRUE), digits = 1))
return(bd$mean)
})
# Value boxes -------------------------------------------------------------
output$bill_length_vb <- renderUI({
value_box(title = "Avg. Bill length",
value = bill_length(),
showcase = bs_icon("1-circle-fill"),
class = "bg-danger")
})
output$bill_depth_vb <- renderUI({
value_box(title = "Avg. Bill depth",
value = bill_depth(),
showcase = bs_icon("2-circle-fill"),
class = "bg-danger")
})
# Plots -------------------------------------------------------------------
output$peng_plot <- renderPlot({
peng1 <- peng %>%
filter(species == input$sel_peng)
ggplot(peng1, aes(x = bill_length_mm,
y = bill_depth_mm)) +
geom_point() +
labs(title = input$sel_peng)
})
}
print(bd$mean)
bd
bill_depth <- reactive({
bd <- peng %>%
filter(species == input$sel_peng) %>%
summarise(mean = round(mean(bill_depth_mm, na.rm = TRUE), digits = 1))
return(bd$mean)
})
bd
bd$mean
bill_depth
runApp()
runApp()
runApp()
runApp()
?bg-danger
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
